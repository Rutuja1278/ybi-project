# -*- coding: utf-8 -*-
"""Classification_Model_to_Identify_Multiple_Disease_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Poonam2002/Poonam2002/blob/main/Classification_Model_to_Identify_Multiple_Disease_Project.ipynb

# **‚≠ê Classification Model to Identify Multiple Disease**
"""

# import library
import pandas as pd

# import data
disease = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/MultipleDiseasePrediction.csv')

# view data
disease.head()

# info of data
disease.info()

# summary statistics
disease.describe()

# check for missing value
disease.isnull()

# correlation
x.corr()

# visualize pairplot
from sklearn.model_selection import train_test_split

# column names
disease.columns

# define y
y = disease['prognosis']

# define X
x = disease[['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing',
       'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity',
       'ulcers_on_tongue','blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting',
       'small_dents_in_nails', 'inflammatory_nails', 'blister',
       'red_sore_around_nose', 'yellow_crust_ooze', ]]

# split data
x_train,x_test,y_train,y_test= train_test_split(x,y,random_state = 2345)

# verify shape
x_train.shape,x_test.shape,y_train.shape,y_test.shape

# select model
from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier()

# train model
model.fit(x_train,y_train)

x_pred=model.predict(x_test)

# predict with model
y_pred=model.predict(x_test)

# model evaluation
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# model accuracy
accuracy_score(y_test,y_pred)

# model confusion matrix
confusion_matrix(y_test,y_pred)

# model classification report
print(classification_report(y_test,y_pred))

x.test

x.shape,y.shape

# future prediction

future_carbon = range(9700, 10000, 50)
x_pred = pd.DataFrame(data=future_carbon, columns=['Carbon'])
x_pred = sm.add_constant(x_pred)
prediction = model.predict(results.params, x_pred)

# define X_new
x_new =

# predict for X_new